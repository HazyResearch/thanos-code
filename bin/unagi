#!/usr/bin/env python

import hydra
from omegaconf import DictConfig, OmegaConf
import rich
import rich.tree
import rich.syntax

from unagi.unagi import main as unagi_main

def print_config(
    config: DictConfig,
    resolve: bool = True,
) -> None:
    """
    Prints content of DictConfig using Rich library and its tree structure.
    Args:
        config (DictConfig): Configuration composed by Hydra.
        resolve (bool, optional): Whether to resolve reference fields of DictConfig.
    """

    style = "dim"
    tree = rich.tree.Tree("CONFIG", style=style, guide_style=style)

    fields = config.keys()
    for field in fields:
        branch = tree.add(field, style=style, guide_style=style)

        config_section = config.get(field)
        branch_content = str(config_section)
        if isinstance(config_section, DictConfig):
            branch_content = OmegaConf.to_yaml(config_section, resolve=resolve)

        branch.add(rich.syntax.Syntax(branch_content, "yaml"))

    rich.print(tree)

    with open("config_tree.txt", "w") as fp:
        rich.print(tree, file=fp)


@hydra.main(config_path="../config", config_name="config.yaml")
def main(args):
    args = process_config(args)
    print_config(args)
    unagi_main(args)


def process_config(config):
    # Add a resolver to evaluate arbitrary Python expressions
    OmegaConf.register_new_resolver("eval", eval)

    # Enable adding new keys to config
    OmegaConf.set_struct(config, False)

    return config


if __name__ == "__main__":

    # Call main without any arguments!
    main()
