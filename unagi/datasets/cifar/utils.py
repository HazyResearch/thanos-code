import numpy as np


# https://github.com/ryanchankh/cifar100coarse/blob/master/sparse2coarse.py
def sparse2coarse(targets, scramble=False, dataset="cifar10"):
    """Convert Pytorch CIFAR100 sparse targets to coarse targets.
    Usage:
        trainset = torchvision.datasets.CIFAR100(path)
        trainset.targets = sparse2coarse(trainset.targets)
    """
    if dataset == "cifar100":
        sparse_coarse_array = [
            4,
            1,
            14,
            8,
            0,
            6,
            7,
            7,
            18,
            3,
            3,
            14,
            9,
            18,
            7,
            11,
            3,
            9,
            7,
            11,
            6,
            11,
            5,
            10,
            7,
            6,
            13,
            15,
            3,
            15,
            0,
            11,
            1,
            10,
            12,
            14,
            16,
            9,
            11,
            5,
            5,
            19,
            8,
            8,
            15,
            13,
            14,
            17,
            18,
            10,
            16,
            4,
            17,
            4,
            2,
            0,
            17,
            4,
            18,
            17,
            10,
            3,
            2,
            12,
            12,
            16,
            12,
            1,
            9,
            19,
            2,
            10,
            0,
            1,
            16,
            12,
            9,
            13,
            15,
            13,
            16,
            19,
            2,
            4,
            6,
            19,
            5,
            5,
            8,
            19,
            18,
            1,
            2,
            15,
            6,
            0,
            17,
            8,
            14,
            13,
        ]
    else:
        # index of original labels:
        # [b'airplane', b'automobile', b'bird', b'cat', b'deer',
        #  b'dog', b'frog', b'horse', b'ship', b'truck']
        sparse_coarse_array = [1, 1, 0, 0, 0, 0, 0, 0, 1, 1]

    targets = np.array(sparse_coarse_array)[targets]
    return targets.tolist()


def get_superclass_subclass_mapping():
    return {
        0: [4, 30, 55, 72, 95],
        1: [1, 32, 67, 73, 91],
        2: [54, 62, 70, 82, 92],
        3: [9, 10, 16, 28, 61],
        4: [0, 51, 53, 57, 83],
        5: [22, 39, 40, 86, 87],
        6: [5, 20, 25, 84, 94],
        7: [6, 7, 14, 18, 24],
        8: [3, 42, 43, 88, 97],
        9: [12, 17, 37, 68, 76],
        10: [23, 33, 49, 60, 71],
        11: [15, 19, 21, 31, 38],
        12: [34, 63, 64, 66, 75],
        13: [26, 45, 77, 79, 99],
        14: [2, 11, 35, 46, 98],
        15: [27, 29, 44, 78, 93],
        16: [36, 50, 65, 74, 80],
        17: [47, 52, 56, 59, 96],
        18: [8, 13, 48, 58, 90],
        19: [41, 69, 81, 85, 89],
    }
